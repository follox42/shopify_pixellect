{% comment %}
  product.liquid - Enhanced for dropshipping with improved discounts & mobile responsiveness
{% endcomment %}
{{ 'product.css' | asset_url | stylesheet_tag }}

<script>
  // Add js-enabled class to html element to enable animations only when JS works
  document.documentElement.className += ' js-enabled';
  
  // Fallback to ensure content visibility if animation script fails
  window.setTimeout(function() {
    if (document.querySelectorAll('.product-animate:not(.animated)').length > 0) {
      document.querySelectorAll('.product-animate').forEach(function(el) {
        el.style.opacity = '1';
        el.style.transform = 'none';
      });
    }
  }, 1000);
</script>

<div class="product">
  {% if product.compare_at_price > product.price %}
  <div class="product__floating-discount">
    {% assign discount_percentage = product.compare_at_price | minus: product.price | times: 100 | divided_by: product.compare_at_price %}
    <span class="product__discount-badge">-{{ discount_percentage }}%</span>
    {% if section.settings.show_promo_timer %}
      <div class="product__discount-timer" data-end-time="{{ section.settings.promo_end_time }}">
        <span class="product__discount-timer-text">{{ section.settings.ends_in_text }}</span>
        <div class="product__discount-countdown">
          <span data-hours>00</span>:<span data-minutes>00</span>:<span data-seconds>00</span>
        </div>
      </div>
    {% endif %}
  </div>
  {% endif %}

  <div class="product__container">
    <!-- Product Gallery -->
    <div class="product__gallery product-animate">
      <div class="product__main-image-container">
        {% if product.featured_media %}
          <img 
            src="{{ product.featured_media | img_url: 'large' }}" 
            alt="{{ product.featured_media.alt | escape }}"
            id="ProductMainImage"
            class="product__main-image"
            data-zoom-image="{{ product.featured_media | img_url: '1200x' }}"
            {% if product.media.size > 1 %}data-index="0"{% endif %}
          >
          
          {% if product.media.size > 1 %}
            <div class="product__image-controls">
              <button class="product__image-control product__image-prev" aria-label="{{ 'product-template.previous_image' | t }}">
                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path d="M15 18L9 12L15 6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
              </button>
              <div class="product__image-zoom">
                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path d="M15 3H21V9" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                  <path d="M9 21H3V15" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                  <path d="M21 3L14 10" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                  <path d="M3 21L10 14" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
              </div>
              <button class="product__image-control product__image-next" aria-label="{{ 'product-template.next_image' | t }}">
                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path d="M9 6L15 12L9 18" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
              </button>
            </div>
          {% endif %}
        {% else %}
          {{ 'product-1' | placeholder_svg_tag: 'product__main-image placeholder-svg' }}
        {% endif %}
      </div>

      {% if product.media.size > 1 %}
        <div class="product__thumbnails">
          {% for media in product.media %}
            <div class="product__thumbnail {% if forloop.first %}is-active{% endif %}" data-media-id="{{ media.id }}" data-index="{{ forloop.index0 }}">
              <img 
                src="{{ media | img_url: '150x' }}" 
                alt="{{ media.alt | escape }}"
                class="product__thumbnail-image"
                data-full-image="{{ media | img_url: 'large' }}"
                data-zoom-image="{{ media | img_url: '1200x' }}"
                loading="lazy"
              >
            </div>
          {% endfor %}
        </div>
        <div class="product__thumbnails-navigation">
          <span class="product__thumbnails-indicator">
            <span class="current">1</span>/<span class="total">{{ product.media.size }}</span>
          </span>
        </div>
      {% endif %}
    </div>

    <!-- Product Information -->
    <div class="product__details product-animate" data-delay="100">
      <h1 class="product__title">{{ product.title }}</h1>
      
      <div class="product__price-container">
        <span class="product__price {% if product.compare_at_price > product.price %}product__price--sale{% endif %}" id="ProductPrice">
          {{ product.price | money_with_currency }}
        </span>
        
        {% if product.compare_at_price > product.price %}
          <span class="product__price--compare" id="ComparePrice">
            {{ product.compare_at_price | money_with_currency }}
          </span>
          
          {% assign discount_percentage = product.compare_at_price | minus: product.price | times: 100 | divided_by: product.compare_at_price %}
          <span class="product__price-saving">-{{ discount_percentage }}%</span>
        {% endif %}
      </div>

      <!-- Purchase Form -->
      {% form 'product', product, id: 'AddToCartForm', class: 'product__form' %}
        <input type="hidden" name="id" value="{{ product.selected_or_first_available_variant.id }}" id="VariantId">
        
        {% if product.variants.size > 1 %}
          <div class="product__variants">
            {% for option in product.options_with_values %}
              <div class="product__option">
                <label for="Option{{ option.position }}" class="product__option-label">
                  {{ option.name }}
                </label>
                
                <select 
                  id="Option{{ option.position }}" 
                  name="options[{{ option.name | escape }}]" 
                  class="product__select" 
                  data-option-position="{{ option.position }}"
                >
                  {% for value in option.values %}
                    <option 
                      value="{{ value | escape }}" 
                      {% if option.selected_value == value %}selected="selected"{% endif %}
                    >
                      {{ value }}
                    </option>
                  {% endfor %}
                </select>
              </div>
            {% endfor %}
          </div>
        {% endif %}
        
        <div class="product__quantity">
          <label for="Quantity" class="product__quantity-label">
            {{ 'product-template.quantity_label' | t }}
          </label>
          <div class="product__quantity-wrapper">
            <button type="button" class="product__quantity-button product__quantity-decrease" data-action="decrease"></button>
            <input 
              type="number" 
              id="Quantity" 
              name="quantity" 
              value="1" 
              min="1" 
              class="product__quantity-input"
            >
            <button type="button" class="product__quantity-button product__quantity-increase" data-action="increase"></button>
          </div>
        </div>
        
        <!-- Promo and timer -->
        {% if section.settings.show_promo_timer %}
          <div class="product__promo">
            <div class="product__promo-badge">{{ 'product-template.promo_badge' | t }}</div>
            <div class="product__timer" data-end-time="{{ section.settings.promo_end_time }}">
              <div class="product__timer-item">
                <span class="product__timer-value" data-days>00</span>
                <span class="product__timer-label">{{ 'product-template.timer_days' | t }}</span>
              </div>
              <div class="product__timer-item">
                <span class="product__timer-value" data-hours>00</span>
                <span class="product__timer-label">{{ 'product-template.timer_hours' | t }}</span>
              </div>
              <div class="product__timer-item">
                <span class="product__timer-value" data-minutes>00</span>
                <span class="product__timer-label">{{ 'product-template.timer_minutes' | t }}</span>
              </div>
              <div class="product__timer-item">
                <span class="product__timer-value" data-seconds>00</span>
                <span class="product__timer-label">{{ 'product-template.timer_seconds' | t }}</span>
              </div>
            </div>
            <div class="product__stock-indicator">
              <div class="product__stock-bar">
                <div class="product__stock-progress" style="width: {{ section.settings.stock_level_percentage }}%"></div>
              </div>
              <div class="product__stock-text">{{ section.settings.stock_message }}</div>
            </div>
          </div>
        {% endif %}
        
        <div class="product__actions">
          <button 
            type="submit" 
            name="add" 
            id="AddToCart" 
            class="product__add-to-cart-button {% if product.available == false %}disabled{% endif %}"
            {% if product.available == false %}disabled{% endif %}
          >
            <span id="AddToCartText">
              {% if product.available %}
                {{ 'product-template.add_to_cart' | t }}
              {% else %}
                {{ 'product-template.sold_out' | t }}
              {% endif %}
            </span>
          </button>
          
          {% if section.settings.show_buy_now %}
            {{ form | payment_button }}
          {% endif %}
        </div>
      {% endform %}
      
      <!-- Shipping Benefits -->
      <div class="product__benefits">
        <div class="product__benefit-item">
          <div class="product__benefit-icon">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M5 12.5C5 11.4456 5.44772 10.5 6 10.5H18C18.5523 10.5 19 11.4456 19 12.5C19 13.5544 18.5523 14.5 18 14.5H6C5.44772 14.5 5 13.5544 5 12.5Z" stroke="#f0c362" stroke-width="1.5"/>
              <rect x="7" y="4" width="10" height="16" rx="2" stroke="#f0c362" stroke-width="1.5"/>
            </svg>
          </div>
          <div class="product__benefit-content">
            <h4 class="product__benefit-title">{{ section.settings.shipping_title }}</h4>
            <p class="product__benefit-text">{{ section.settings.shipping_text }}</p>
          </div>
        </div>
        <div class="product__benefit-item">
          <div class="product__benefit-icon">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M12 21C16.9706 21 21 16.9706 21 12C21 7.02944 16.9706 3 12 3C7.02944 3 3 7.02944 3 12C3 16.9706 7.02944 21 12 21Z" stroke="#f0c362" stroke-width="1.5"/>
              <path d="M12 7L12 12M12 12L15 15M12 12L9 15" stroke="#f0c362" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
            </svg>
          </div>
          <div class="product__benefit-content">
            <h4 class="product__benefit-title">{{ section.settings.guarantee_title }}</h4>
            <p class="product__benefit-text">{{ section.settings.guarantee_text }}</p>
          </div>
        </div>
        <div class="product__benefit-item">
          <div class="product__benefit-icon">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M9 12L11 14L15 10M21 12C21 16.9706 16.9706 21 12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12Z" stroke="#f0c362" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
            </svg>
          </div>
          <div class="product__benefit-content">
            <h4 class="product__benefit-title">{{ section.settings.payment_title }}</h4>
            <p class="product__benefit-text">{{ section.settings.payment_text }}</p>
          </div>
        </div>
      </div>
      
      <!-- Trust and reviews -->
      {% if section.settings.show_trust_badges %}
        <div class="product__trust">
          <h4 class="product__trust-title">{{ section.settings.trust_badges_title }}</h4>
          <div class="product__trust-badges">
            {% for type in shop.enabled_payment_types %}
              <li class="footer__payment-item">
                {{ type | payment_type_svg_tag: class: 'footer__payment-icon' }}
              </li>
            {% endfor %}
          </div>
        </div>
      {% endif %}
    </div>
  </div>
  
  <!-- Customizable description sections -->
  <div class="product__description-container">
    <div class="product__accordions product-animate" data-delay="200">
      <!-- Main description -->
      <div class="product__accordion is-active">
        <button class="product__accordion-header">
          <span>{{ section.settings.description_title }}</span>
          <span class="product__accordion-icon">
            <svg width="14" height="14" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M18 15L12 9L6 15" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
            </svg>
          </span>
        </button>
        <div class="product__accordion-content">
          <div class="product__description rte">
            {{ product.description }}
          </div>
        </div>
      </div>
      
      <!-- Features -->
      {% if section.settings.show_features_tab and section.settings.features_content != blank %}
        <div class="product__accordion">
          <button class="product__accordion-header">
            <span>{{ section.settings.features_title }}</span>
            <span class="product__accordion-icon">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M18 15L12 9L6 15" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
              </svg>
            </span>
          </button>
          <div class="product__accordion-content">
            <div class="product__features rte">
              {{ section.settings.features_content }}
            </div>
          </div>
        </div>
      {% endif %}
      
      <!-- Shipping -->
      {% if section.settings.show_shipping_tab and section.settings.shipping_content != blank %}
        <div class="product__accordion">
          <button class="product__accordion-header">
            <span>{{ section.settings.shipping_tab_title }}</span>
            <span class="product__accordion-icon">
              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M18 15L12 9L6 15" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
              </svg>
            </span>
          </button>
          <div class="product__accordion-content">
            <div class="product__shipping-details rte">
              {{ section.settings.shipping_content }}
            </div>
          </div>
        </div>
      {% endif %}
    </div>
  </div>
</div>

<!-- Mobile Buy Bar -->
{% if section.settings.show_mobile_buy_bar %}
<div class="product__mobile-buy-bar">
  <div class="product__mobile-price-container">
    <span class="product__mobile-price">
      {{ product.price | money_with_currency }}
    </span>
    {% if product.compare_at_price > product.price %}
      <span class="product__mobile-compare">{{ product.compare_at_price | money_with_currency }}</span>
    {% endif %}
  </div>
  <button class="product__mobile-buy-button" id="MobileBuyButton">
    {{ 'product-template.add_to_cart' | t }}
  </button>
</div>
{% endif %}

<!-- Add variant data for JavaScript -->
<script id="ProductJson" type="application/json">
  {{ product | json }}
</script>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Animation of elements on scroll
    const animateElements = document.querySelectorAll('.product-animate');
    
    if (animateElements.length > 0) {
      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            const element = entry.target;
            const delay = element.getAttribute('data-delay') || 0;
            
            setTimeout(() => {
              element.classList.add('animated');
            }, delay);
            
            // Once animated, stop observing
            observer.unobserve(element);
          }
        });
      }, {
        root: null,
        rootMargin: '0px',
        threshold: 0.1
      });
      
      // Observe each element to animate
      animateElements.forEach(element => {
        observer.observe(element);
      });
    }
    
    // Product thumbnail and gallery handling
    const thumbnails = document.querySelectorAll('.product__thumbnail');
    const mainImage = document.getElementById('ProductMainImage');
    const prevButton = document.querySelector('.product__image-prev');
    const nextButton = document.querySelector('.product__image-next');
    const currentIndicator = document.querySelector('.product__thumbnails-indicator .current');
    let currentIndex = 0;
    
    // Function to update main image
    function updateMainImage(index) {
      if (!thumbnails[index]) return;
      
      currentIndex = index;
      
      // Update main image
      const thumbnail = thumbnails[index];
      const fullImageUrl = thumbnail.querySelector('.product__thumbnail-image').getAttribute('data-full-image');
      const zoomImageUrl = thumbnail.querySelector('.product__thumbnail-image').getAttribute('data-zoom-image');
      
      mainImage.src = fullImageUrl;
      mainImage.setAttribute('data-zoom-image', zoomImageUrl);
      mainImage.setAttribute('data-index', index);
      
      // Update active class
      thumbnails.forEach(thumb => thumb.classList.remove('is-active'));
      thumbnail.classList.add('is-active');
      
      // Update indicator
      if (currentIndicator) {
        currentIndicator.textContent = index + 1;
      }
    }
    
    // Set up thumbnail click events
    if (thumbnails.length > 0) {
      thumbnails.forEach((thumbnail, index) => {
        thumbnail.addEventListener('click', function() {
          updateMainImage(index);
        });
      });
    }
    
    // Set up navigation buttons
    if (prevButton && thumbnails.length > 1) {
      prevButton.addEventListener('click', function() {
        const newIndex = (currentIndex - 1 + thumbnails.length) % thumbnails.length;
        updateMainImage(newIndex);
      });
    }
    
    if (nextButton && thumbnails.length > 1) {
      nextButton.addEventListener('click', function() {
        const newIndex = (currentIndex + 1) % thumbnails.length;
        updateMainImage(newIndex);
      });
    }
    
    // Mobile swipe for gallery
    if (mainImage && thumbnails.length > 1) {
      let startX;
      
      mainImage.addEventListener('touchstart', function(e) {
        startX = e.touches[0].clientX;
      }, {passive: true});
      
      mainImage.addEventListener('touchend', function(e) {
        const endX = e.changedTouches[0].clientX;
        const diff = startX - endX;
        
        if (Math.abs(diff) > 50) { // Minimum swipe distance
          if (diff > 0) {
            // Swipe left - next image
            nextButton.click();
          } else {
            // Swipe right - previous image
            prevButton.click();
          }
        }
      }, {passive: true});
    }
    
    // Quantity buttons management
    const quantityButtons = document.querySelectorAll('.product__quantity-button');
    if (quantityButtons.length > 0) {
      quantityButtons.forEach(button => {
        button.addEventListener('click', function() {
          const input = document.getElementById('Quantity');
          const currentValue = parseInt(input.value);
          const action = this.getAttribute('data-action');
          
          if (action === 'decrease' && currentValue > 1) {
            input.value = currentValue - 1;
          } else if (action === 'increase') {
            input.value = currentValue + 1;
          }
        });
      });
    }
    
    // Mobile buy button
    const mobileBuyButton = document.getElementById('MobileBuyButton');
    const addToCartButton = document.getElementById('AddToCart');
    
    if (mobileBuyButton && addToCartButton) {
      mobileBuyButton.addEventListener('click', function() {
        // Scroll to form if not visible
        const form = document.getElementById('AddToCartForm');
        if (form) {
          form.scrollIntoView({behavior: 'smooth'});
        }
        
        // Trigger add to cart
        setTimeout(() => {
          addToCartButton.click();
        }, 300);
      });
    }
    
    // Accordion management
    const accordionHeaders = document.querySelectorAll('.product__accordion-header');
    if (accordionHeaders.length > 0) {
      accordionHeaders.forEach(header => {
        header.addEventListener('click', function() {
          const accordion = this.parentElement;
          const isActive = accordion.classList.contains('is-active');
          
          // Close all accordions
          const accordions = document.querySelectorAll('.product__accordion');
          accordions.forEach(acc => acc.classList.remove('is-active'));
          
          // Open clicked accordion if it wasn't already open
          if (!isActive) {
            accordion.classList.add('is-active');
          }
        });
      });
    }
    
    // Enhanced countdown timer with animation
    function updateTimer(timerElement) {
      if (!timerElement) return;
      
      const endTimeStr = timerElement.getAttribute('data-end-time');
      const endTime = new Date(endTimeStr).getTime();
      
      // Update timer every second
      const interval = setInterval(function() {
        const now = new Date().getTime();
        const distance = endTime - now;
        
        // Time remaining
        const days = Math.floor(distance / (1000 * 60 * 60 * 24));
        const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
        const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
        const seconds = Math.floor((distance % (1000 * 60)) / 1000);
        
        // Update days element if it exists
        const daysElement = timerElement.querySelector('[data-days]');
        if (daysElement) {
          daysElement.textContent = days.toString().padStart(2, '0');
        }
        
        // Update hours element
        const hoursElement = timerElement.querySelector('[data-hours]');
        if (hoursElement) {
          hoursElement.textContent = hours.toString().padStart(2, '0');
        }
        
        // Update minutes element
        const minutesElement = timerElement.querySelector('[data-minutes]');
        if (minutesElement) {
          minutesElement.textContent = minutes.toString().padStart(2, '0');
        }
        
        // Update seconds element
        const secondsElement = timerElement.querySelector('[data-seconds]');
        if (secondsElement) {
          secondsElement.textContent = seconds.toString().padStart(2, '0');
        }
        
        // Update countdown element (for floating discount)
        const countdownElement = timerElement.querySelector('[data-countdown]');
        if (countdownElement) {
          countdownElement.textContent = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
        }
        
        // Pulse animation on seconds change
        if (secondsElement) {
          secondsElement.classList.add('pulse');
          setTimeout(() => {
            secondsElement.classList.remove('pulse');
          }, 500);
        }
        
        // If the countdown is finished
        if (distance < 0) {
          clearInterval(interval);
          if (countdownElement) {
            countdownElement.textContent = "00:00:00";
          } else {
            timerElement.innerHTML = "<p>{{ section.settings.offer_ended_text }}</p>";
          }
        }
      }, 1000);
    }
    
    // Update all timers
    const mainTimer = document.querySelector('.product__timer');
    if (mainTimer) {
      updateTimer(mainTimer);
    }
    
    const discountTimer = document.querySelector('.product__discount-timer');
    if (discountTimer) {
      updateTimer(discountTimer);
    }
    
    // =====================================
    // VARIANT SELECTION & PRICE UPDATE CODE
    // =====================================
    
    // Get product data from JSON
    const productJson = document.getElementById('ProductJson');
    if (productJson) {
      const product = JSON.parse(productJson.textContent);
      const variants = product.variants;
      
      // Get the price display elements
      const priceElement = document.getElementById('ProductPrice');
      const compareElement = document.getElementById('ComparePrice');
      const priceContainer = document.querySelector('.product__price-container');
      const mobilePriceElement = document.querySelector('.product__mobile-price');
      const mobileCompareElement = document.querySelector('.product__mobile-compare');
      
      // Get variant selectors
      const variantSelectors = document.querySelectorAll('.product__select');
      
      // Get variant ID input
      const variantIdInput = document.getElementById('VariantId');
      
      // Function to format money consistently with Shopify
      function formatMoney(cents) {
        return (cents / 100).toFixed(2).replace(/(\d)(?=(\d\d\d)+(?!\d))/g, '$1,');
      }
      
      // Function to update the price based on selected variant
      function updatePrice(variant) {
        if (!variant) {
          return;
        }
        
        // Update the variant ID input value
        if (variantIdInput) {
          variantIdInput.value = variant.id;
        }
        
        // Update the displayed price
        if (priceElement) {
          priceElement.innerHTML = formatMoney(variant.price) + ' ' + window.Shopify.currency.active;
        }
        
        // Update mobile price
        if (mobilePriceElement) {
          mobilePriceElement.innerHTML = formatMoney(variant.price) + ' ' + window.Shopify.currency.active;
        }
        
        // Update any comparison price and savings badge
        if (variant.compare_at_price && variant.compare_at_price > variant.price) {
          if (compareElement) {
            compareElement.innerHTML = formatMoney(variant.compare_at_price) + ' ' + window.Shopify.currency.active;
            compareElement.style.display = 'inline-block';
          }
          
          if (mobileCompareElement) {
            mobileCompareElement.innerHTML = formatMoney(variant.compare_at_price) + ' ' + window.Shopify.currency.active;
            mobileCompareElement.style.display = 'inline-block';
          }
          
          // Calculate and update discount percentage
          const discountPercentage = Math.round((variant.compare_at_price - variant.price) * 100 / variant.compare_at_price);
          const savingElement = priceContainer.querySelector('.product__price-saving');
          
          if (savingElement) {
            savingElement.innerHTML = '-' + discountPercentage + '%';
            savingElement.style.display = 'inline-block';
          } else {
            // Create a saving element if it doesn't exist
            const newSavingElement = document.createElement('span');
            newSavingElement.className = 'product__price-saving';
            newSavingElement.innerHTML = '-' + discountPercentage + '%';
            priceContainer.appendChild(newSavingElement);
          }
          
          // Update floating discount badge
          const discountBadge = document.querySelector('.product__discount-badge');
          if (discountBadge) {
            discountBadge.textContent = '-' + discountPercentage + '%';
          }
          
          // Show floating discount
          const floatingDiscount = document.querySelector('.product__floating-discount');
          if (floatingDiscount) {
            floatingDiscount.classList.add('active');
          }
          
          // Add sale class to price
          if (priceElement) {
            priceElement.classList.add('product__price--sale');
          }
          
          if (mobilePriceElement) {
            mobilePriceElement.classList.add('product__price--sale');
          }
        } else {
          // No compare price, hide elements
          if (compareElement) {
            compareElement.style.display = 'none';
          }
          
          if (mobileCompareElement) {
            mobileCompareElement.style.display = 'none';
          }
          
          const savingElement = priceContainer.querySelector('.product__price-saving');
          if (savingElement) {
            savingElement.style.display = 'none';
          }
          
          // Hide floating discount
          const floatingDiscount = document.querySelector('.product__floating-discount');
          if (floatingDiscount) {
            floatingDiscount.classList.remove('active');
          }
          
          // Remove sale class from price
          if (priceElement) {
            priceElement.classList.remove('product__price--sale');
          }
          
          if (mobilePriceElement) {
            mobilePriceElement.classList.remove('product__price--sale');
          }
        }
        
        // Update add to cart button state
        const addToCartButton = document.getElementById('AddToCart');
        const addToCartText = document.getElementById('AddToCartText');
        const mobileBuyButton = document.getElementById('MobileBuyButton');
        
        if (variant.available) {
          addToCartButton.classList.remove('disabled');
          addToCartButton.disabled = false;
          addToCartText.innerHTML = '{{ section.settings.add_to_cart_text }}';
          
          if (mobileBuyButton) {
            mobileBuyButton.disabled = false;
            mobileBuyButton.classList.remove('disabled');
          }
        } else {
          addToCartButton.classList.add('disabled');
          addToCartButton.disabled = true;
          addToCartText.innerHTML = '{{ section.settings.sold_out_text }}';
          
          if (mobileBuyButton) {
            mobileBuyButton.disabled = true;
            mobileBuyButton.classList.add('disabled');
            mobileBuyButton.textContent = '{{ section.settings.sold_out_text }}';
          }
        }
      }
      
      // Function to find the selected variant
      function getSelectedVariant() {
        // Get the currently selected options
        const selectedOptions = [];
        
        variantSelectors.forEach(selector => {
          selectedOptions.push(selector.value);
        });
        
        // Find the matching variant
        let foundVariant = null;
        
        variants.forEach(variant => {
          let optionsMatch = true;
          
          for (let i = 0; i < selectedOptions.length; i++) {
            if (variant.options[i] !== selectedOptions[i]) {
              optionsMatch = false;
              break;
            }
          }
          
          if (optionsMatch) {
            foundVariant = variant;
          }
        });
        
        return foundVariant;
      }
      
      // Set up event listeners for variant selectors
      if (variantSelectors.length > 0) {
        variantSelectors.forEach(selector => {
          selector.addEventListener('change', function() {
            const selectedVariant = getSelectedVariant();
            updatePrice(selectedVariant);
            
            // If the variant has a featured image, update the main image
            if (selectedVariant && selectedVariant.featured_image) {
              const imageId = selectedVariant.featured_image.id;
              const thumbnail = document.querySelector(`.product__thumbnail[data-media-id="${imageId}"]`);
              
              if (thumbnail) {
                const index = parseInt(thumbnail.getAttribute('data-index'));
                updateMainImage(index);
              }
            }
          });
        });
        
        // Initialize with the default variant
        const initialVariant = getSelectedVariant();
        if (initialVariant) {
          updatePrice(initialVariant);
        }
      }
    }
  });
</script>

{% schema %}
{
  "name": "Dropshipping Product",
  "settings": [
    {
      "type": "header",
      "content": "Layout"
    },
    {
      "type": "text",
      "id": "quantity_label",
      "label": "Quantity label",
      "default": "Quantity"
    },
    {
      "type": "text",
      "id": "add_to_cart_text",
      "label": "Add to cart text",
      "default": "Add to cart"
    },
    {
      "type": "text",
      "id": "sold_out_text",
      "label": "Sold out text",
      "default": "Sold out"
    },
    {
      "type": "checkbox",
      "id": "show_buy_now",
      "label": "Show 'Buy it now' button",
      "default": true
    },
    {
      "type": "header",
      "content": "Promotions"
    },
    {
      "type": "checkbox",
      "id": "show_promo_timer",
      "label": "Show limited time offer timer",
      "default": true
    },
    {
      "type": "text",
      "id": "promo_badge_text",
      "label": "Promo badge text",
      "default": "LIMITED OFFER"
    },
    {
      "type": "text",
      "id": "promo_end_time",
      "label": "Promo end date (YYYY-MM-DD)",
      "default": "2025-12-31",
      "info": "Format: YYYY-MM-DD"
    },
    {
      "type": "text",
      "id": "offer_ended_text",
      "label": "Offer ended text",
      "default": "Offer ended!"
    },
    {
      "type": "checkbox",
      "id": "show_floating_discount",
      "label": "Show floating discount badge",
      "default": true
    },
    {
      "type": "text",
      "id": "ends_in_text",
      "label": "Ends in text",
      "default": "Offer ends in:"
    },
    {
      "type": "checkbox",
      "id": "show_stock_indicator",
      "label": "Show stock indicator",
      "default": true
    },
    {
      "type": "range",
      "id": "stock_level_percentage",
      "min": 10,
      "max": 90,
      "step": 5,
      "label": "Stock level percentage",
      "default": 75
    },
    {
      "type": "text",
      "id": "stock_message",
      "label": "Stock message",
      "default": "Only a few items left in stock!"
    },
    {
      "type": "header",
      "content": "Mobile Options"
    },
    {
      "type": "checkbox",
      "id": "show_mobile_buy_bar",
      "label": "Show sticky buy bar on mobile",
      "default": true
    },
    {
      "type": "header",
      "content": "Product benefits"
    },
    {
      "type": "text",
      "id": "shipping_title",
      "label": "Shipping benefit title",
      "default": "Fast Shipping"
    },
    {
      "type": "text",
      "id": "shipping_text",
      "label": "Shipping text",
      "default": "Tracked delivery in 10-15 days"
    },
    {
      "type": "text",
      "id": "guarantee_title",
      "label": "Guarantee benefit title",
      "default": "Money-Back Guarantee"
    },
    {
      "type": "text",
      "id": "guarantee_text",
      "label": "Guarantee text",
      "default": "Refund within 30 days"
    },
    {
      "type": "text",
      "id": "payment_title",
      "label": "Payment benefit title",
      "default": "Secure Payment"
    },
    {
      "type": "text",
      "id": "payment_text",
      "label": "Payment text",
      "default": "100% secure transactions"
    },
    {
      "type": "checkbox",
      "id": "show_trust_badges",
      "label": "Show trust badges",
      "default": true
    },
    {
      "type": "text",
      "id": "trust_badges_title",
      "label": "Trust badges title",
      "default": "Trusted Payment Methods"
    },
    {
      "type": "header",
      "content": "Product description"
    },
    {
      "type": "text",
      "id": "description_title",
      "label": "Description title",
      "default": "Description"
    },
    {
      "type": "checkbox",
      "id": "show_features_tab",
      "label": "Show features tab",
      "default": true
    },
    {
      "type": "text",
      "id": "features_title",
      "label": "Features title",
      "default": "Features"
    },
    {
      "type": "richtext",
      "id": "features_content",
      "label": "Features content",
      "default": "<ul><li>High-quality material</li><li>Careful manufacturing</li><li>Exclusive design</li><li>Available in multiple sizes</li></ul>"
    },
    {
      "type": "checkbox",
      "id": "show_shipping_tab",
      "label": "Show shipping tab",
      "default": true
    },
    {
      "type": "text",
      "id": "shipping_tab_title",
      "label": "Shipping tab title",
      "default": "Shipping & Returns"
    },
    {
      "type": "richtext",
      "id": "shipping_content",
      "label": "Shipping content",
      "default": "<p><strong>Delivery time:</strong> 10-15 business days</p><p><strong>Shipping costs:</strong> Free worldwide</p><p><strong>Return policy:</strong> Returns accepted within 30 days, guaranteed refund.</p>"
    },
    {
      "type": "header",
      "content": "Image Gallery"
    },
    {
      "type": "checkbox",
      "id": "enable_image_zoom",
      "label": "Enable image zoom on hover",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_image_navigation",
      "label": "Show image navigation controls",
      "default": true
    },
    {
      "type": "text",
      "id": "previous_image_text",
      "label": "Previous image text",
      "default": "Previous"
    },
    {
      "type": "text",
      "id": "next_image_text",
      "label": "Next image text",
      "default": "Next"
    }
  ],
  "presets": [
    {
      "name": "Dropshipping Product",
      "category": "Product"
    }
  ]
}
{% endschema %}
